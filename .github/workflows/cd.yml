name: Continuous Delivery

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build the Docker image
    - name: Build Docker Image
      run: docker build -t oussamazemzami/lol-tracker-frontend:latest .

    # Step 4: Push the Docker image to Docker Hub
    - name: Push Docker Image
      run: docker push oussamazemzami/lol-tracker-frontend:latest

    # Step 5: Deploy Image to Portainer
    - name: Deploy Image to Portainer
      run: |
          PORTAINER_URL="http://172.105.92.177:9000"
          USERNAME="admin"
          PASSWORD="V62r67BjCrhz@LX"
          IMAGE="oussamazemzami/lol-tracker-frontend:latest"
          CONTAINER_NAME="lol-tracker-frontend"
          ENV_ID=2  # Update with the actual ID of your environment

          # Authenticate with Portainer
          JWT=$(curl -sSL -X POST "${PORTAINER_URL}/api/auth" -H "Content-Type: application/json" \
            -d "{\"username\": \"${USERNAME}\", \"password\": \"${PASSWORD}\"}" | jq -r '.jwt')

          if [ -z "$JWT" ] || [ "$JWT" == "null" ]; then
            echo "Error: Unable to authenticate with Portainer."
            exit 1
          fi

          echo "Authentication successful. JWT retrieved."

          # Find and delete the existing container
          EXISTING_CONTAINER_ID=$(curl -sSL -X GET "${PORTAINER_URL}/api/endpoints/${ENV_ID}/docker/containers/json" \
            -H "Authorization: Bearer ${JWT}" | jq -r ".[] | select(.Image == \"${IMAGE}\") | .Id")

          if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
            echo "Stopping and removing existing container: $EXISTING_CONTAINER_ID"
            
            # Stop the container
            curl -sSL -X POST "${PORTAINER_URL}/api/endpoints/${ENV_ID}/docker/containers/${EXISTING_CONTAINER_ID}/stop" \
              -H "Authorization: Bearer ${JWT}"
            
            # Remove the container
            curl -sSL -X DELETE "${PORTAINER_URL}/api/endpoints/${ENV_ID}/docker/containers/${EXISTING_CONTAINER_ID}" \
              -H "Authorization: Bearer ${JWT}"
          else
            echo "No existing container found for image: ${IMAGE}"
          fi

          # Deploy the new image
          echo "Creating and starting a new container."
          RESPONSE=$(curl -sSL -o /dev/null -w "%{http_code}" -X POST "${PORTAINER_URL}/api/endpoints/${ENV_ID}/docker/containers/create" \
            -H "Authorization: Bearer ${JWT}" \
            -H "Content-Type: application/json" \
            -d "{
                  \"Image\": \"${IMAGE}\",
                  \"name\": \"${CONTAINER_NAME}\",
                  \"HostConfig\": {
                    \"RestartPolicy\": {
                      \"Name\": \"always\"
                    }
                  }
                }")

          if [ "$RESPONSE" -ne 201 ]; then
            echo "Error: Failed to create the new container."
            exit 1
          fi

          # Start the new container
          RESPONSE=$(curl -sSL -o /dev/null -w "%{http_code}" -X POST "${PORTAINER_URL}/api/endpoints/${ENV_ID}/docker/containers/${CONTAINER_NAME}/start" \
            -H "Authorization: Bearer ${JWT}")

          if [ "$RESPONSE" -ne 204 ]; then
            echo "Error: Failed to start the new container."
            exit 1
          fi

          echo "Container deployed and started successfully."
